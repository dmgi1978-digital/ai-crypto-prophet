import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import requests

# ========== –¢–û–ö–ï–ù –£–ñ–ï –í–°–¢–ê–í–õ–ï–ù! ==========
API_TOKEN = "8338086698:AAFF9l3jn8C-UL7yxnCIsntSbR-3zHy66lI"
# ========== –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£ ==========

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å AI-–ü—Ä–æ–≥–Ω–æ–∑"), KeyboardButton(text="üìâ –ê–Ω–∞–ª–∏–∑ –ü–∞–Ω–∏–∫–∏")],
        [KeyboardButton(text="‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"), KeyboardButton(text="‚ÑπÔ∏è –û –ë–æ—Ç–µ")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üöÄ *AI Crypto Prophet* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —à–∞–º–∞–Ω –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é –¥–≤–∏–∂–µ–Ω–∏—è, —Ä–∞–∑–≥–æ–Ω—è—é –ø–∞–Ω–∏–∫—É.\n\n"
        "üíé *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞:*\n"
        "¬´XRP –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏ –Ω–∞ 15% –∫ –ø—è—Ç–Ω–∏—Ü–µ!\n"
        "¬∑ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 82%\n"
        "¬∑ –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: $0.58\n"
        "¬∑ –°—Ç–æ–ø-–ª–æ—Å—Å: $0.54¬ª\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

def get_crypto_data():
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            'vs_currency': 'usd',
            'order': 'market_cap_desc',
            'per_page': 10,
            'page': 1,
            'sparkline': 'false'
        }
        response = requests.get(url, params=params)
        return response.json()
    except:
        return None

def generate_prediction(data):
    if not data:
        return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    coin = data[0]
    name = coin['name']
    symbol = coin['symbol'].upper()
    price = coin['current_price']
    change = coin['price_change_percentage_24h']
    
    prob = min(95, max(50, 70 + int(change)))
    target = round(price * 1.12, 4)
    stop = round(price * 0.94, 4)
    
    return (
        f"üíé *{name} ({symbol})*\n"
        f"üìà *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞:* {prob}%\n"
        f"üí∞ *–¶–µ–Ω–∞:* ${price}\n"
        f"üéØ *–¶–µ–ª—å:* ${target}\n"
        f"‚õî *–°—Ç–æ–ø:* ${stop}\n\n"
        f"‚ÑπÔ∏è *AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.*"
    )

@dp.message(F.text == "üìä –ü–æ–ª—É—á–∏—Ç—å AI-–ü—Ä–æ–≥–Ω–æ–∑")
async def forecast(message: types.Message):
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–ª–æ–∫—á–µ–π–Ω...", parse_mode="Markdown")
    data = get_crypto_data()
    text = generate_prediction(data)
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.message(F.text == "üìâ –ê–Ω–∞–ª–∏–∑ –ü–∞–Ω–∏–∫–∏")
async def panic(message: types.Message):
    await message.answer(
        "ü§ñ *–ê–Ω–∞–ª–∏–∑ –ø–∞–Ω–∏–∫–∏:*\n"
        "–£—Ä–æ–≤–µ–Ω—å –∏—Å—Ç–µ—Ä–∏–∫–∏: 42/100 üü°\n\n"
        "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n"
        "–ù–µ –ø—Ä–æ–¥–∞–≤–∞–π –≤ –ø–∞–Ω–∏–∫–µ. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ ‚Äî –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Ö–æ–¥–∞.\n"
        "P.S. –ï—Å–ª–∏ –±—ã —è –ø–æ–ª—É—á–∞–ª 1$ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞–Ω–∏–∫—ë—Ä–∞ ‚Äî —è –±—ã —É–∂–µ –∫—É–ø–∏–ª –õ–∞–º–±–æ.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.message(F.text == "‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def donate(message: types.Message):
    await message.answer(
        "üôè *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:*\n"
        "TON: `EQDk...V9Xy` *(–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)*\n"
        "USDT: `TXYZ...ABCD`\n\n"
        "*–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –¥–æ–Ω–∞—Ç –ø–∏—Ç–∞–µ—Ç –º–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞!*",
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

@dp.message(F.text == "‚ÑπÔ∏è –û –ë–æ—Ç–µ")
async def about(message: types.Message):
    await message.answer(
        "ü§ñ *AI Crypto Prophet v1.0*\n"
        "¬∑ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        "¬∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CoinGecko\n"
        "¬∑ –†–∞–±–æ—Ç–∞–µ—Ç 24/7\n"
        "¬∑ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–Ω–∞—Ç—ã –≤ –∫—Ä–∏–ø—Ç–µ\n\n"
        "‚ö†Ô∏è *–ù–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç.*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def main():
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())